using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Cleverbot.Net;
using Discord;
using Discord.Audio;
using Discord.Commands;
using GoogleMaps.LocationServices;
using NAudio.Wave;
using Newtonsoft.Json.Linq;
using YoutubeExtractor;

namespace DiscordBot
{
    internal class Bot
    {
        #region Internal Variables

        private CommandService command;
        private Configuration Config = new Configuration();
        private CleverbotSession cleverBotSession;
        private DiscordClient client;
        private System.Timers.Timer streamCheck;
        private bool cleverBotSessionCreated;
        private bool playing = true;
        private string audioPath;
        private string mp3Path;
        private Message mediaMessage;
        private string mediaName;
        private string senderName;
        private Channel textChannel;
        private Channel vChannelToStream;

        #endregion Internal Variables

        public Bot()
        {
            #region Init

            client = new DiscordClient();
            Jenkins.Init(); // JenkinsDB-initialising

            streamCheck = new System.Timers.Timer((Config.TwitchCheckInterval * 1000));
            streamCheck.Elapsed += StreamCheck_Elapsed;
            streamCheck.Start();
            CheckForStartedStreams();
            client = new DiscordClient(input =>
            {
                input.LogLevel = LogSeverity.Info;
                input.LogHandler = Log;
            });

            client.UsingCommands(input =>
            {
                input.PrefixChar = '/';
                input.AllowMentionPrefix = true;
            });

            client.UsingAudio(x =>
            {
                x.Mode = AudioMode.Outgoing;
            });

            command = client.GetService<CommandService>();
            cleverBotSessionCreated = CreateCleverBotSession();
            if (!cleverBotSessionCreated)
            {
                try
                {
                    cleverBotSession = CleverbotSession.NewSession(Config.CleverbotAPIUser, Config.CleverbotAPIKey);

                }
                catch (Exception e)
                {
                    Console.WriteLine("Error while setting up Cleverbot-API...\r\nExceptionMsg: " + e.Message);
                }
            }

            #endregion Init

            #region Events

            client.MessageReceived += async (s, e) =>
            {
                if (e.Message.User.IsBot)
                {
                    return;
                }
                CheckUser(e.Message.User);
                if (e.Message.Text.StartsWith("/"))
                {
                    Jenkins.Users.CountUpCommands(e.Message.User);
                    if (Config.Debug && !Jenkins.Users.IsUserDev(e.Message.User.Id))
                    {
                        NotifyDevs(Supporter.BuildDebugUserMessage(e.Message.Text, e.Message.User, e.Message.Channel));
                    }
                    return;
                }
                Jenkins.Users.CountUpMessages(e.Message.User);


                if ((e.Message.IsMentioningMe() && !Config.Muted) || e.Message.Channel.IsPrivate)
                {
                    await e.Message.Channel.SendIsTyping();
                    string answer = cleverBotSessionCreated ? TalkWithCleverBot(Supporter.RemoveMention(e.Message.Text)): Talk(Supporter.RemoveMention(e.Message.Text));
                    await e.Channel.SendMessage(answer);
                    Jenkins.Users.CountUpTalkedToMe(e.Message.User);
                }
                else if (Supporter.YesOrNo(Config.RandomTalkChance) && !Config.Muted)
                {
                    await e.Message.Channel.SendIsTyping();
                    string answer = cleverBotSessionCreated ? TalkWithCleverBot(e.Message.Text) : Talk(e.Message.Text);
                    if (!(!e.Message.Channel.IsPrivate && answer == "The Cleverbot-API is currently unavailable."))
                    {
                        if (Config.TTSEnabled)
                        {
                            await e.Channel.SendTTSMessage(answer);
                        }
                        else
                        {
                            await e.Channel.SendMessage(answer);
                        }
                    }
                }
                else if (!Config.Muted && Jenkins.Insults.IsUserVictim(e.Message.User.Id) && Supporter.YesOrNo(Config.RandomActionChance))
                {
                    string authorName = e.User.Name;
                    string insult = Supporter.BuildInsult(Jenkins.Insults.GetRandomInsult(), authorName);
                    if (Config.TTSEnabled)
                    {
                        await e.Channel.SendTTSMessage(insult);
                    }
                    else
                    {
                        await e.Channel.SendMessage(insult);
                    }
                }
            };

            #endregion Events

            #region Commands

            #region General

            command.CreateCommand("help")
            .Alias(new string[] { "commands", "cmds", "?" })
            .Description("Helping things and stuff")
            .Do(async (e) =>
            {
                await e.Message.Delete();
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("Hello, my name is **Jenkins**!");
                sb.AppendLine();
                foreach (var cmd in command.AllCommands)
                {
                    if (!cmd.IsHidden)
                    {
                        if (cmd.Parameters.Count() == 1)
                        {
                            sb.Append(string.Format("- /**{0}** <{1}> - {2} ",
                                                        cmd.Text,
                                                        cmd.Parameters.First().Name,
                                                        cmd.Description
                                                        ));
                        }
                        else if (cmd.Parameters.Count() == 2)
                        {
                            sb.Append(string.Format("- /**{0}** <{1}> <{2}> - {3} ",
                                                        cmd.Text,
                                                        cmd.Parameters.ElementAt(0).Name,
                                                        cmd.Parameters.ElementAt(1).Name,
                                                        cmd.Description
                                                        ));
                        }
                        else
                        {
                            sb.Append(string.Format("- /**{0}** - {1} ",
                                                        cmd.Text,
                                                        cmd.Description
                                                        ));
                        }
                        if (cmd.Aliases.Count() >= 1)
                        {
                            foreach (var alias in cmd.Aliases)
                            {
                                sb.Append(string.Format("**[**{0}**]** ",
                                    alias
                                    ));
                            }
                        }
                        sb.AppendLine();
                        if (sb.Length > 1750)
                        {
                            await e.Channel.SendMessage(sb.ToString());
                            sb.Clear();
                        }
                    }
                }
                await e.Channel.SendMessage(sb.ToString());
            });

            command.CreateCommand("weather")
                .Description("Guess it...")
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    var msg = await e.Channel.SendMessage("I'll look out for the forecast");
                    var weatherResponse = GetWeather(e.Message.User, msg);
                    string weatherString = weatherResponse.Result;
                    var weatherObject = Newtonsoft.Json.Linq.JObject.Parse(weatherString);
                    WeatherDAO currentWeather = weatherObject.GetValue("currently").ToObject<WeatherDAO>();
                    await msg.Edit(BuildForecast(currentWeather));
                });

            command.CreateCommand("dice")
                .Description("I'll roll a dice for you, Sir!")
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Message.Channel.SendMessage(Supporter.RollDice());
                });

            command.CreateCommand("ping")
                .Description("For really important connection-Tests and stuff")
                .Do(async (e) =>
                {
                    await e.Channel.SendMessage("Pong!");
                });

            #endregion General

            #region Users

            command.CreateCommand("users")
                .Description("All users I've ever seen writing")
                .Do(async (e) =>
            {
                await e.Message.Delete();
                await e.Channel.SendMessage(Jenkins.Users.ListUsers());
            });

            command.CreateCommand("stats")
                .Description("I'm counting everything since your first steps. Accept it.")
                .Do(async (e) =>
            {
                await e.Message.Delete();
                await e.Channel.SendMessage(Jenkins.Users.GetUserStats(e.Message.User.Id));
            });

            command.CreateCommand("statsOf")
                .Description("View the stats of someone else. HueHueHue.")
                .Parameter("name", ParameterType.Required)
                .Alias(new string[] { "so", "statsof" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();

                    ulong userId;
                    if (!Jenkins.Users.GetIDofUser(e.Args[0].ToString(), out userId))
                    {
                        await e.User.SendMessage(string.Format("I'm sorry but I dont know **{0}** :(\r\nHint: It have to be the real name, not the nickname."
                            , (e.Args[0].ToString())));
                        return;
                    }
                    await e.Channel.SendMessage(Jenkins.Users.GetUserStats(userId));
                });

            command.CreateCommand("admins")
    .Description("All my existing masters for this server")
    .Do(async (e) =>
    {
        await e.Message.Delete();
        string adminMsg = Supporter.BuildAdminList(Jenkins.Users.GetAdminNames(e.Message.Server.Id));
        await e.Message.Channel.SendMessage(adminMsg);
    });

            #endregion Users

            #region Insults

            command.CreateCommand("insult")
                .Description("Insulting an user of your choice")
                .Alias(new string[] { "i" })
                .Parameter("name", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Channel.SendTTSMessage(Supporter.BuildInsult(Jenkins.Insults.GetRandomInsult(true), e.Args[0].ToString()));
                });

            command.CreateCommand("addInsult")
                .Description("Add a insult to my Vacabulary Hint: '*' will be the Username")
                .Parameter("text", ParameterType.Required)
                .Alias(new string[] { "ai", "addinsult" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    Jenkins.Insults.AddInsult(e.Message.User, e.Args[0]);
                });

            command.CreateCommand("insultMe")
                .Description("If you insist...")
                .Alias(new string[] { "im", "insultme" })
                .Do(async (e) =>
            {
                await e.Message.Delete();
                await e.Channel.SendMessage(Supporter.BuildInsult(Jenkins.Insults.GetRandomInsult(true), e.Message.User.Name));
            });

            command.CreateCommand("allInsults")
                .Description("All insults in my vocabulary")
                .Alias(new string[] { "insultlist", "allinsults", "insultList" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Channel.SendMessage(Jenkins.Insults.ListInsults());
                });

            command.CreateCommand("insults")
                .Description("All your own created insults")
                .Alias(new string[] { "myinsults" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Channel.SendMessage(Jenkins.Insults.ListInsultsForUser(e.Message.User, e.Message.Server.Id));
                });

            command.CreateCommand("delInsult")
                .Description("Delete one of your insults")
                .Parameter("index", ParameterType.Required)
                .Alias(new string[] { "di", "delinsult" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    Jenkins.Insults.DelInsult(e.Message.User, int.Parse(e.Args[0]), e.Message.Server.Id);
                });

            command.CreateCommand("addVictim")
                .Description("He should suffer too of you insist")
                .Parameter("name", ParameterType.Required)
                .Alias(new string[] { "av", "addvictim" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    ulong userID;
                    if (Jenkins.Users.GetIDofUser(e.Args[0], out userID))
                    {
                        Jenkins.Insults.AddVictim(userID);
                    }
                    else
                    {
                        await e.Channel.SendMessage(string.Format("I'm sorry but I dont know **{0}** :(\r\nHint: It have to be the real name, not the nickname."
                            + "\r\nPS: You can also add a Victim through the ID and /addVictimByID <ID>"
                            , (e.Args[0].ToString())));
                    }
                });

            command.CreateCommand("addVictimByID")
                .Hide()
                .Parameter("id", ParameterType.Required)
                .Alias(new string[] { "avbi", "addvictimbyid" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Jenkins.Insults.AddVictim(ulong.Parse(e.Args[0].ToString()));
                });

            command.CreateCommand("delVictim")
                .Description("And he not...")
                .Parameter("name", ParameterType.Required)
                .Alias(new string[] { "dv", "delvictim" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();

                    ulong userId;
                    if (Jenkins.Users.GetIDofUser(e.Args[0].ToString(), out userId))
                    {
                        Jenkins.Insults.DelVictim(userId);
                    }
                });

            command.CreateCommand("victims")
                .Description("They all shall suffer")
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Channel.SendMessage(Jenkins.Insults.ListVictims());
                });

            #endregion Insults

            #region Quotes

            command.CreateCommand("quote")
                .Description("You'll get one quote of my huge collection")
                .Alias(new string[] { "q" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    await e.Channel.SendMessage(Jenkins.Quotes.GetRandomQuote());
                });

            command.CreateCommand("quoteOf")
                .Description("I'll search for a quote of the owner you prefer")
                .Alias(new string[] { "qo", "quoteof" })
                .Parameter("name", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    string quote = Jenkins.Quotes.GetQuoteOf(e.Args[0].ToString());
                    if (quote != string.Empty || quote != null)
                    {
                        await e.Channel.SendMessage(quote);
                    }
                    else
                    {
                        await e.User.SendMessage(string.Format("I'm sorry but theres no quote matching your search for **{0}** :(", e.Args[0].ToString()));
                    }
                });

            command.CreateCommand("addQuote")
                .Alias(new string[] { "aq", "addquote" })
                .Description("Adds your super fancy quote to my vocabulary")
                .Parameter("text", ParameterType.Required)
                .Parameter("owner", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    string newQuote = e.GetArg(0);
                    string owner = e.GetArg(1);
                    Jenkins.Quotes.AddQuote(e.Message.User, newQuote, owner);
                    await e.User.SendMessage("A new quote has been added, Sir!");
                });

            command.CreateCommand("findQuote")
                .Alias(new string[] { "fq", "findquote" })
                .Description("I'll search for a quote on your order, sir!")
                .Parameter("text", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    string searchKey = e.GetArg(0);
                    string quote = Jenkins.Quotes.GetQuote(searchKey);

                    if (quote != string.Empty || quote != null)
                    {
                        await e.Channel.SendMessage(quote);
                    }
                    else
                    {
                        await e.User.SendMessage(string.Format("I'm sorry but theres no quote matching your search for **{0}** :(", e.Args[0].ToString()));
                    }
                });

            command.CreateCommand("quotes")
                .Description("Shows all quotes you've created")
                .Alias(new string[] { "lq", "listquotes", "listQuotes" })
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    string quotes = Jenkins.Quotes.ListQuotes(e.Message.User, e.Message.Server.Id);

                    foreach (var message in Supporter.SplitMessage(quotes))
                    {
                        await e.Channel.SendMessage(message);
                    }
                });

            command.CreateCommand("delQuote")
                .Description("Removes one of ya quotes")
                .Parameter("index", ParameterType.Required)
                .Alias(new string[] { "dq", "delquote", "removeQuote", "removequote" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Jenkins.Quotes.DelQuote(e.Message.User, int.Parse(e.Args[0].ToString()), e.Message.Server.Id);
                });

            #endregion Quotes

            #region Twitch


            command.CreateCommand("watchChannel")
                .Description("Adds a Twitch-Channel to the watchlist of this channel")
                            .Parameter("name", ParameterType.Required)
                            .Alias(new string[] { "wc", "watchchannel", "addChannel", "addchannel", "followChannel", "followchannel" })
                            .Do(async (e) =>
                {
                    if (e.Message.Channel.IsPrivate)
                    {
                        return;
                    }
                    int observingTwitchChannelsInThisDiscordChannel = Jenkins.Twitch.GetObservingTwitchChannelsForDiscordChannel(e.Message.Channel.Id).Length;
                    if (observingTwitchChannelsInThisDiscordChannel >= Config.TwitchChannelLimit && !Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        await e.Message.Channel.SendMessage(string.Format("There are already **{0}/{1}** Twitch-Channels on my watchlist for **#{2}**"
                            , observingTwitchChannelsInThisDiscordChannel
                            , Config.TwitchChannelLimit
                            , e.Message.Channel.Name));
                        return;
                    }
                    await e.Message.Delete();
                    var msg = await e.Channel.SendMessage("Checking channel...");

                    if (!Jenkins.Twitch.IsTwitchChannelRegiseredByName(e.Args[0]))
                    {
                        RegisterTwitchChannel(e.Args[0], e.Message.Channel);
                        NotifyDevs(string.Format("Twitch-Channel **{0}** was registered by **{1}** in **{2}**",
                            e.Args[0],
                            e.Message.User.Name,
                            e.Message.Channel.Server.Name + " -> #" + e.Message.Channel.Name));
                    }

                    if (!Jenkins.Twitch.IsDiscordChannelFollowingTwitchChannel(e.Args[0], e.Message.Channel.Id))
                    {
                        Jenkins.Twitch.AddTwitchChannelToWatchlistOfDiscordChannel(e.Args[0], e.Message.User, e.Message.Channel);
                        await msg.Edit(string.Format("Twitch-Channel **{0}** was added to watchlist in **#{1}** by **{2}**"
                            , e.Args[0]
                            , e.Message.Channel.Name
                            , e.Message.User.Name));
                        return;
                    }
                    await msg.Edit(string.Format("Channel **{0}** is already in watchlist."
                            , e.Args[0]));
                });

            command.CreateCommand("unwatchChannel")
                .Description("Removes the desired Twitch-Channel from the watchlist")
                .Parameter("name", ParameterType.Required)
                .Alias(new string[] { "uc", "unwatchchannel", "delChannel", "delchannel", "unfollowChannel", "unfollowchannel" })
                .Do(async (e) =>
                {
                    if (e.Message.Channel.IsPrivate)
                    {
                        return;
                    }
                    await e.Message.Delete();
                    if (Jenkins.Twitch.IsDiscordChannelFollowingTwitchChannel(e.Args[0], e.Message.Channel.Id))
                    {
                        Jenkins.Twitch.RemoveTwitchChannelFromWatchlistOfDiscordChannel(e.Args[0], e.Message.Channel);
                        await e.Channel.SendMessage(string.Format("Twitch-Channel **{0}** was removed from watchlist for **#{1}** by **{2}**"
                            , e.Args[0]
                            , e.Message.Channel.Name
                            , e.Message.User.Name));
                        return;
                    }
                    await e.Channel.SendMessage(string.Format("Twitch-Channel **{0}** isn't in watchlist for **#{1}**"
                            , e.Args[0]
                            , e.Message.Channel.Name));
                });

            command.CreateCommand("channels")
                .Description("View all Twitch-Channels I'm watching for this channel")
                .Alias(new string[] { "followingChannels", "followingchannels" })
                .Do(async (e) =>
                {
                    if (e.Message.Channel.IsPrivate)
                    {
                        return;
                    }
                    await e.Message.Delete();
                    string[] watchlist = Jenkins.Twitch.GetObservingTwitchChannelsForDiscordChannel(e.Message.Channel.Id);
                    string oberservingChannels = string.Empty;
                    foreach (var channelName in watchlist)
                    {
                        oberservingChannels = oberservingChannels + "- > **" + channelName + "**\r\n";
                    }
                    await e.Channel.SendMessage(string.Format("I'm observing **{0}/{1}** Twitch-Channels in **#{2}**\r\n{3}"
                        , watchlist.Length
                        , Config.TwitchChannelLimit
                        , e.Message.Channel.Name
                        , oberservingChannels
                        ));
                });


            #endregion Twitch

            #region Giphy

            command.CreateCommand("rgif")
                .Description("I'm spitting out a random GIF")
                .Do(async (e) =>
            {
                await e.Message.Delete();
                GetRandomGIF(e.Message.Channel);
            });

            command.CreateCommand("tgif")
                .Description("The currently top-trending GIF on Giphy")
                .Do(async (e) =>
            {
                await e.Message.Delete();
                GetTrendingGIF(e.Message.Channel);
            });

            command.CreateCommand("gif")
                .Description("I'll search a GIF for you, darling <3")
                .Parameter("keyword", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    GetGIF(e.Args[0], e.Message.Channel);
                });

            #endregion Giphy

            #region VoiceCommands

            command.CreateCommand("attack")
                .Description("Type the name of the vChannel hehe xd")
                .Parameter("channel", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Channel vChannel = null;
                    if (e.Args[0] != null)
                    {
                        var channels = e.Server.FindChannels(e.Args[0], ChannelType.Voice);
                        foreach (var voiChannel in channels)
                        {
                            vChannel = voiChannel;
                        }
                    }
                    else
                    {
                        vChannel = e.User.VoiceChannel;
                    }

                    if (vChannel != null)
                    {
                        var vClient = await client.GetService<AudioService>().Join(vChannel);

                        string path = Path.Combine(Environment.CurrentDirectory, "files", "mp3", "pardy.mp3");
                        var channelCount = client.GetService<AudioService>().Config.Channels;
                        var OutFormat = new WaveFormat(48000, 16, channelCount);
                        using (var MP3Reader = new Mp3FileReader(path))
                        using (var resampler = new MediaFoundationResampler(MP3Reader, OutFormat))
                        {
                            resampler.ResamplerQuality = 60;
                            int blockSize = OutFormat.AverageBytesPerSecond / 50;
                            byte[] buffer = new byte[blockSize];
                            int byteCount;

                            while ((byteCount = resampler.Read(buffer, 0, blockSize)) > 0)
                            {
                                if (byteCount < blockSize)
                                {
                                    for (int i = byteCount; i < blockSize; i++)
                                        buffer[i] = 0;
                                }
                                vClient.Send(buffer, 0, blockSize);
                            }
                        }
                        //streamFile(vClient, newKids);

                        //await client.GetService<AudioService>().Leave(vChannel);
                    }
                }
             );

            command.CreateCommand("pardy")
                .Description("Maaskantje joooonge!")
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Channel vChannel = e.User.VoiceChannel;

                    if (vChannel != null)
                    {
                        string path = Path.Combine(Environment.CurrentDirectory, "files", "mp3", "pardy.mp3");
                        StreamFileToVoiceChannel(path, vChannel);
                    }
                }
             );

            command.CreateCommand("lul")
                .Description("At your own risk")
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Channel vChannel = e.User.VoiceChannel;

                    if (vChannel != null)
                    {
                        string path = Path.Combine(Environment.CurrentDirectory, "files", "mp3", "lul.mp3");
                        StreamFileToVoiceChannel(path, vChannel);
                    }
                }
        );

            command.CreateCommand("play")
                .Description("Streams a YouTube Video to your vChannel")
                .Parameter("url", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Channel vChannel = e.User.VoiceChannel;
                    if (vChannel != null)
                    {
                        senderName = e.Message.User.Name;
                        textChannel = e.Message.Channel;
                        vChannelToStream = vChannel;
                        DownloadAudio(e.Args[0]);
                    }
                    else
                    {
                        await e.Message.User.SendMessage("You have to be in a Voicechannel for this");
                    }
                }
                    );

            command.CreateCommand("stop")
                .Description("Stops the playing audio")
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    playing = false;
                    Thread.Sleep(500);
                    playing = true;
                }
                    );

            #endregion VoiceCommands

            #region Administration

            command.CreateCommand("globalChannels")
                .Alias(new string[] { "allChannels", "allchannels", "globalchannels" })
                .Do(async (e) =>
                {
                    if (e.Message.Channel.IsPrivate || !Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    string[] globalTwitchChannelList = Jenkins.Twitch.GetGlobalObservingTwitchChannels();
                    string oberservingChannels = string.Empty;
                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("< - - - **All Twitch-Channels** - - - >");
                    sb.AppendLine();
                    foreach (var twitchChannel in globalTwitchChannelList)
                    {
                        sb.AppendLine("TwitchChannel: **" + twitchChannel + "**");
                        ulong[] discordChannelIds = Jenkins.Twitch.GetFollowingDiscordChannelsForTwitchChannel(twitchChannel);
                        foreach (var discordChannel in discordChannelIds)
                        {
                            var channel = client.GetChannel(discordChannel);
                            sb.AppendLine("|-> **#" + channel.Name + "** on server **" + channel.Server.Name + "**");
                        }
                        sb.AppendLine();
                    }
                    await e.Channel.SendMessage(sb.ToString());
                });

            command.CreateCommand("settings")
                .Description("My current configuration")
                .Alias(new string[] { "config", "cfg", "preferences" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserDev(e.Message.User.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    await e.Channel.SendMessage(Config.GetConfiguration(!e.Message.Channel.IsPrivate));
                });

            command.CreateCommand("reinitializeDatabase")
                .Description("Re-reads the whole fking database")
                .Alias(new string[] { "reread" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id)&& false) // ToDo: Datenbank wird verdoppelt
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Jenkins.Read();
                });

            command.CreateCommand("loadConfig")
                .Description("Reloads my config")
                .Alias(new string[] { "loadconfig", "reloadconfig", "reloadConfig" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Config.LoadConfig();
                });

            command.CreateCommand("say")
                .Description("I will announce news in your name")
                .Parameter("text", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    await e.Message.Channel.SendTTSMessage(e.Args[0]);
                });

            command.CreateCommand("mute")
                .Description("One word and I'll shut my dirty mouth!")
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Config.Muted = true;
                });

            command.CreateCommand("unmute")
                .Description("The show must go on")
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Config.Muted = false;
                });

            command.CreateCommand("enableTTS")
                .Description("I'll turn into a speaking war-machine")
                .Alias(new string[] { "ttson", "TTSOn", "enabletts" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Config.TTSEnabled = true;
                });

            command.CreateCommand("disableTTS")
                .Description("Shy Ronnie?")
                .Alias(new string[] { "ttsoff", "TTSOff", "disabletts" })
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    Config.TTSEnabled = false;
                });

            command.CreateCommand("nuke")
                .Description("Nuke the chat")
                .Parameter("count", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    int count = int.Parse(e.Args[0]);
                    if (count > 50)
                    {
                        count = 50;
                    }
                    var messages = await e.Message.Channel.DownloadMessages(count);
                    await e.Message.Channel.DeleteMessages(messages);
                });

            //command.CreateCommand("nukeUser")
            //    .Description("Deleting the users messages")
            //    .Parameter("count", ParameterType.Required)
            //    .Do(async (e) =>
            //    {
            //        if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
            //        {
            //            return;
            //        }
            //        await e.Message.Delete();
            //        int count = int.Parse(e.Args[0]);
            //        if (count > 15)
            //        {
            //            count = 15;
            //        }
            //        var messages = await e.Message.Channel.DownloadMessages(count);
            //        await e.Message.Channel.DeleteMessages(messages);
            //    });

            command.CreateCommand("promote")
                .Description("Promotes a normal user to a super-sonic Admin!")
                .Parameter("name", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id) && !(e.Message.User.Id == Config.OwnerID))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    ulong userId;
                    if (Jenkins.Users.GetIDofUser(e.Args[0].ToString(), out userId))
                    {
                        Jenkins.Users.PromoteToAdmin(userId, e.Message.Server.Id);
                    }
                    else
                    {
                        await e.Message.Channel.SendMessage(string.Format("I don't know {0} :("
                            , e.Args[0].ToString()));
                    }
                });

            command.CreateCommand("degrade")
                .Description("Turns an Admin to one of the common mob")
                .Parameter("name", ParameterType.Required)
                .Do(async (e) =>
                {
                    if (!Jenkins.Users.IsUserAdmin(e.Message.User.Id, e.Message.Server.Id))
                    {
                        return;
                    }
                    await e.Message.Delete();
                    ulong userId;
                    if (Jenkins.Users.GetIDofUser(e.Args[0].ToString(), out userId))
                    {
                        Jenkins.Users.DegradeToUser(userId);
                    }
                    else
                    {
                        await e.Message.Channel.SendMessage(string.Format("I don't know {0} :("
                            , e.Args[0].ToString()));
                    }
                });

            command.CreateCommand("helpop")
                .Description("Ask all admins a question")
                .Hide()
                .Parameter("text", ParameterType.Required)
                .Do(async (e) =>
                {
                    await e.Message.Delete();
                    NotifyDevs(e.Args[0]);
                });

            command.CreateCommand("shutdown")
                .Description("Bye bye.")
                .Do(async (e) =>
                {
                    if (Jenkins.Users.IsUserDev(e.Message.User.Id))
                    {
                        await e.Message.Delete();
                        await e.Channel.SendMessage("Shutting down...");
                        Thread.Sleep(1000);
                        await client.Disconnect();
                        Environment.Exit(0);
                    }
                });

            #endregion Administration

            #region DefaultCommands



            #endregion DefaultCommands

            #endregion Commands

            #region Essentials

            client.ExecuteAndWait(async () =>
    {
        while (true)
        {
            await client.Connect(Config.DiscordToken, TokenType.Bot);
            Console.WriteLine("Jenkins successfully connected...");
            break;
        }
    });

            #endregion Essentials
        }

        #region Methods

        private string Talk(string msg)
        {
            try
            {
                var msgTask = cleverBotSession.SendAsync(msg);
                msgTask.Wait();
                return msgTask.Result;
            }
            catch (Exception e)
            {
                NotifyDevs(BuildExceptionMessage(e, "Talk()", msg));
                return "The Cleverbot-API is currently unavailable.";
            }
        }

        private async void NotifyDevs(string text)
        {
            var adminArray = Jenkins.Users.GetDevIDs();
            foreach (var adminID in adminArray)
            {
                try
                {
                    var adminChannel = client.CreatePrivateChannel(adminID);
                    adminChannel.Wait();
                    await adminChannel.Result.SendMessage(text);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message + " while NotifyDevs()");
                }
            }
        }

        private async void SendMessage(string text, Channel channel)
        {
            await channel.SendMessage(text);
        }

        private string BuildExceptionMessage(Exception e, string whileFunction = "", object parameter = null)
        {
            StringBuilder sb = new StringBuilder("Exception thrown");
            if (whileFunction != string.Empty)
                sb.Append(" while **" + whileFunction + "**\r\n");

            sb.AppendLine("Exception: " + e.Message);

            if (e.InnerException != null)
                sb.AppendLine("InnerException: " + e.InnerException.Message);

            if (parameter != null)
            {
                sb.Append("Function-Parameter: ");
                sb.AppendLine(parameter.ToString());
                sb.AppendLine("Typeof: " + parameter.GetType().ToString());
            }

            sb.AppendLine("Occurrence time: " + DateTime.Now.ToLongTimeString());

            return sb.ToString();
        }

        private void RegisterTwitchChannel(string name, Channel channel = null)
        {
            using (var client = new HttpClient())
            {
                string request = string.Format("https://api.twitch.tv/kraken/channels/{0}?client_id={1}"
                   , name
                   , Config.TwitchAPIKey);
                try
                {
                    var response = client.GetStringAsync(request);
                    response.Wait();
                    var channelObject = JObject.Parse(response.Result);
                    Jenkins.Twitch.AddTwitchChannel(channelObject);
                }
                catch (Exception e)
                {
                    NotifyDevs(BuildExceptionMessage(e, "RegisterTwitchChannel()", request));
                    if (channel != null)
                        SendMessage("There's no Twitch-Channel called **" + name + "** :(", channel);
                }
            }
        }

        private void CheckForStartedStreams()
        {
            string[] twitchChannels = Jenkins.Twitch.GetGlobalObservingTwitchChannels();

            Dictionary<ulong, string> broadcastList = new Dictionary<ulong, string>();
            foreach (var twitchChannel in twitchChannels)
            {
                string request = "";
                ulong[] discordChannelsToBroadcast = Jenkins.Twitch.GetFollowingDiscordChannelsForTwitchChannel(twitchChannel);

                if (discordChannelsToBroadcast.Length == 0 && false) // ToDo Exception #1
                {
                    NotifyDevs("Incontinence in database for Twitch-Channel **" + twitchChannel + "**");
                    return;
                }

                request = string.Format("https://api.twitch.tv/kraken/streams/{0}?client_id={1}"
               , twitchChannel
               , Config.TwitchAPIKey);
                try
                {
                    using (var client = new HttpClient())
                    {
                        var response = client.GetStringAsync(request);
                        response.Wait();
                        var requestObject = JObject.Parse(response.Result);
                        var streamString = requestObject.GetValue("stream").ToString();
                        if ((streamString != null && streamString != string.Empty))
                        {
                            var streamObject = JObject.Parse(streamString);
                            ulong streamId = ulong.Parse(streamObject.GetValue("_id").ToString());
                            if (Jenkins.Twitch.IsStreamNotPosted(streamId))
                            {
                                var channelString = streamObject.GetValue("channel").ToString();
                                var channelObject = JObject.Parse(channelString);
                                Jenkins.Twitch.AddStream(streamObject, channelObject);
                                string broadcast = Supporter.BuildStreamBroadcast(Jenkins.Twitch.GetStream(streamId));
                                foreach (var discordChannel in discordChannelsToBroadcast)
                                {
                                    broadcastList.Add(discordChannel, broadcast);
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    NotifyDevs(BuildExceptionMessage(e, "CheckForStartedStreams()", request));
                }
            }
            BroadcastStreamUpdates(broadcastList);
        }

        private void StreamCheck_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            CheckForStartedStreams();
        }

        private async void BroadcastStreamUpdates(Dictionary<ulong, string> broadcasts)
        {
            foreach (var broadcast in broadcasts)
            {
                try
                {
                    Channel channelToPost = client.GetChannel(broadcast.Key);
                    await channelToPost.SendMessage(broadcast.Value);
                }
                catch (Exception e)
                {
                    NotifyDevs(BuildExceptionMessage(e, "BroadcastStreamUpdates\r\nInconsistence for parametred channelId", new object[] { broadcast.Key }));
                }


            }
        }

        private async Task<string> GetWeather(User user, Message msg)
        {
            var address = "Frankfurt, Germany";
            string request = "";
            var locationService = new GoogleLocationService();
            var point = locationService.GetLatLongFromAddress(address);

            var latitude = point.Latitude;
            var longitude = point.Longitude;

            using (var client = new HttpClient())
            {
                client.Timeout = (new TimeSpan(0, 0, 5));
                try
                {
                    request = "https://api.darksky.net/forecast/a6e1a984fca6e6be6a2fc56e7e1b377c/50.1109,8.6821";
                    // request = string.Format("https://api.darksky.net/forecast/{0}/{1},{2}"
                    //, config.DarkskyAPIKey
                    //, latitude
                    //, longitude);
                    var rq = client.GetStringAsync(request);
                    rq.Wait();
                    return rq.Result;
                }
                catch (Exception e)
                {
                    // ToDo: Error on VM
                    await user.SendMessage(e.Message);
                    NotifyDevs(BuildExceptionMessage(e, "GetWeather()", request));
                    await msg.Edit("I can't do this right now :(");
                    return null;
                }
            }
        }

        private async void GetRandomGIF(Channel channel)
        {
            using (var client = new HttpClient())
            {
                try
                {
                    string response = await client.GetStringAsync(string.Format("http://api.giphy.com/v1/gifs/random?api_key={0}"
                   , Config.GiphyAPIKey));
                    var requestObject = Newtonsoft.Json.Linq.JObject.Parse(response);
                    var dataString = requestObject.GetValue("data").ToString();
                    var dataObject = Newtonsoft.Json.Linq.JObject.Parse(dataString);
                    string gifURL = dataObject.GetValue("image_original_url").ToString();
                    await channel.SendMessage(gifURL);
                }
                catch (Exception e)
                {
                    await channel.SendMessage(e.Message);
                }
            }
        }

        private async void GetGIF(string keyword, Channel channel)
        {
            using (var client = new HttpClient())
            {
                try
                {
                    string response = await client.GetStringAsync(string.Format("http://api.giphy.com/v1/gifs/search?q={0}&api_key={1}&limit=1"
                   , keyword
                   , Config.GiphyAPIKey));
                    var requestObject = Newtonsoft.Json.Linq.JObject.Parse(response);
                    var dataString = requestObject.GetValue("data").ToString();
                    JArray dataObject = Newtonsoft.Json.Linq.JArray.Parse(dataString);
                    var arrayString = dataObject.First().ToString();
                    var arrayObject = Newtonsoft.Json.Linq.JObject.Parse(arrayString);
                    var imagesString = arrayObject.GetValue("images").ToString();
                    var imagesObject = Newtonsoft.Json.Linq.JObject.Parse(imagesString);
                    var fixedHeightString = imagesObject.GetValue("fixed_height").ToString();
                    var fixedHeightObject = Newtonsoft.Json.Linq.JObject.Parse(fixedHeightString);
                    string gifURL = fixedHeightObject.GetValue("url").ToString();
                    await channel.SendMessage(string.Format("**#{0}**\r\n{1}"
                        , keyword
                        , gifURL));
                }
                catch (Exception e)
                {
                    if (e.Message.Equals("Sequence contains no elements") || e.Message.Equals("Die Sequenz enthält keine Elemente"))
                    {
                        await channel.SendMessage(string.Format("There are no results for **{0}** :("
                            , keyword));
                        return;
                    }
                    await channel.SendMessage(e.Message);
                }
            }
        }

        private async void GetTrendingGIF(Channel channel)
        {
            using (var client = new HttpClient())
            {
                try
                {
                    string response = await client.GetStringAsync(string.Format("http://api.giphy.com/v1/gifs/trending?api_key={0}&limit=1"
                   , Config.GiphyAPIKey));
                    var requestObject = Newtonsoft.Json.Linq.JObject.Parse(response);
                    var dataString = requestObject.GetValue("data").ToString();
                    JArray dataObject = Newtonsoft.Json.Linq.JArray.Parse(dataString);
                    var arrayString = dataObject.First().ToString();
                    var arrayObject = Newtonsoft.Json.Linq.JObject.Parse(arrayString);
                    var imagesString = arrayObject.GetValue("images").ToString();
                    var imagesObject = Newtonsoft.Json.Linq.JObject.Parse(imagesString);
                    var fixedHeightString = imagesObject.GetValue("fixed_height").ToString();
                    var fixedHeightObject = Newtonsoft.Json.Linq.JObject.Parse(fixedHeightString);
                    string gifURL = fixedHeightObject.GetValue("url").ToString();
                    await channel.SendMessage(gifURL);
                }
                catch (Exception e)
                {
                    await channel.SendMessage(e.Message);
                }
            }
        }

        private string BuildForecast(WeatherDAO weather)
        {
            return string.Format("-- Weather forecast :white_sun_small_cloud:  for {0} --\r\n\r\nIt's **{1}** on **{2}C°** (feels like {3}C°) with a windspeed :dash: at **{4}m/s**"
                , DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString()
                , weather.summary
                , Supporter.Celcius(weather.temperature).ToString("0.#")
                , Supporter.Celcius(weather.apparentTemperature).ToString("0.#")
                , weather.windSpeed);
        }

        private async void StreamFileToVoiceChannel(string path, Channel vChannel)
        {
            var vClient = await client.GetService<AudioService>().Join(vChannel);
            var channelCount = client.GetService<AudioService>().Config.Channels; // Get the number of AudioChannels our AudioService has been configured to use.
            var OutFormat = new WaveFormat(48000, 16, channelCount); // Create a new Output Format, using the spec that Discord will accept, and with the number of channels that our client supports.
            using (var MP3Reader = new Mp3FileReader(path)) // Create a new Disposable MP3FileReader, to read audio from the filePath parameter
            using (var resampler = new MediaFoundationResampler(MP3Reader, OutFormat)) // Create a Disposable Resampler, which will convert the read MP3 data to PCM, using our Output Format
            {
                resampler.ResamplerQuality = 60; // Set the quality of the resampler to 60, the highest quality
                int blockSize = OutFormat.AverageBytesPerSecond / 50; // Establish the size of our AudioBuffer
                byte[] buffer = new byte[blockSize];
                int byteCount;

                while ((byteCount = resampler.Read(buffer, 0, blockSize)) > 0 && playing) // Read audio into our buffer, and keep a loop open while data is present
                {
                    if (byteCount < blockSize)
                    {
                        // Incomplete Frame
                        for (int i = byteCount; i < blockSize; i++)
                            buffer[i] = 0;
                    }
                    vClient.Send(buffer, 0, blockSize); // Send the buffer to Discord
                }
            }
        }

        private async void DownloadAudio(string URL)
        {
            string link = URL;
            mediaMessage = await textChannel.SendMessage("Downloading audio...");
            IEnumerable<YoutubeExtractor.VideoInfo> videoInfos = null;
            try
            {
                videoInfos = DownloadUrlResolver.GetDownloadUrls(link);
            }
            catch (Exception)
            {
                await mediaMessage.Edit("Invalid link, " + senderName);
                return;
            }

            VideoInfo video = videoInfos.First(info => info.VideoType == VideoType.Mp4 && info.Resolution == 0);
            mediaName = video.Title;
            audioPath = Path.Combine(Environment.CurrentDirectory, "files", "audio", video.Title + video.AudioExtension);
            mp3Path = Path.Combine(Environment.CurrentDirectory, "files", "mp3", video.Title + ".mp3");
            var audioDownloader = new VideoDownloader(video, audioPath);

            audioDownloader.DownloadFinished += AudioDownloader_DownloadFinished;
            audioDownloader.Execute();
        }

        private async void AudioDownloader_DownloadFinished(object sender, EventArgs e)
        {
            var waveProvider = new MediaFoundationReader(audioPath);
            MediaFoundationEncoder.EncodeToMp3(waveProvider, mp3Path);
            await mediaMessage.Edit(string.Format("Now playing **{0}**\r\nby **{1}**", mediaName, senderName));
            StreamFileToVoiceChannel(mp3Path, vChannelToStream);
        }

        //    private void DownloadAudioYTE(string link)
        //    {
        //        IEnumerable<VideoInfo> videoInfos = DownloadUrlResolver.GetDownloadUrls(link);

        //        VideoInfo video = videoInfos
        ////.Where(info => info.CanExtractAudio)
        //.OrderByDescending(info => info.AudioBitrate)
        //.First();

        //        if (video.RequiresDecryption)
        //        {
        //            DownloadUrlResolver.DecryptDownloadUrl(video);
        //        }
        //        audioPath = Path.Combine(Environment.CurrentDirectory, "files", "audio", video.Title + video.AudioExtension);
        //        var audioDownloader = new AudioDownloader(video, audioPath);

        //        audioDownloader.DownloadProgressChanged += (sender, args) => Console.WriteLine(args.ProgressPercentage * 0.85);
        //        audioDownloader.AudioExtractionProgressChanged += (sender, args) => Console.WriteLine(85 + args.ProgressPercentage * 0.15);

        //        audioDownloader.Execute();
        //    }

        private bool CreateCleverBotSession(string name = "Jenkins")
        {
            using (var client = new HttpClient())
            {
                var values = new Dictionary<string, string>
            {
       { "user", Config.CleverbotAPIUser },
       { "key", Config.CleverbotAPIKey },
       { "nick", name }
            };

                var content = new FormUrlEncodedContent(values);

                var response = client.PostAsync("https://cleverbot.io/1.0/create", content);

                response.Wait();

                var responseString = response.Result.Content.ReadAsStringAsync();
                var responseObject = Newtonsoft.Json.Linq.JObject.Parse(responseString.Result.ToString());
                var status = responseObject.GetValue("status").ToString();
                return (status == "success" || status == "Error: reference name already exists");
            }
        }

        private string TalkWithCleverBot(string text, string name = "Jenkins")
        {
            using (var client = new HttpClient())
            {
                var values = new Dictionary<string, string>
            {
       { "user", Config.CleverbotAPIUser },
       { "key", Config.CleverbotAPIKey },
       { "nick", name },
       { "text", text }

            };

                var content = new FormUrlEncodedContent(values);

                var response = client.PostAsync("https://cleverbot.io/1.0/ask", content);

                var responseString = response.Result.Content.ReadAsStringAsync();
                response.Wait();
                var responseObject = Newtonsoft.Json.Linq.JObject.Parse(responseString.Result.ToString());
                var answer = responseObject.GetValue("response").ToString();
                return answer;
            }
        }

        private void CheckUser(User user)
        {
            if (!Jenkins.Users.IsUserRegistered(user.Id) && !user.IsBot)
            {
                Jenkins.Users.AddUser(user);
            }
        }

        private void Log(object sender, LogMessageEventArgs e)
        {
            Console.WriteLine(e.Message);
        }

        #endregion Methods
    }
}